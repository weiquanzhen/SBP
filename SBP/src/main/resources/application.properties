# 用于区别项目环境 dev-开发环境 test-测试环境 prod生产环境 不配置-通用配置，不区分环境。通过配置该环境会读取不同的配置文件application-*.properties 
# 也可通过--spring.profiles.active=***配置
# 项目启动首先会读取这个参数的值来区分到底是什么环境，读取什么配置文件，可以通过---spring.profiles.active=**配置也可在application.properties中配置，只要属性存在，则会区分环境
spring.profiles.active=dev

# 访问 /actuator/health 将打印更多的服务健康信息 详情请看pom spring-boot-starter-actuator 配置
management.endpoint.health.show-details=ALWAYS
# 手动配置需要暴露的端点，暴露多个端点用","分割
# GET	/actuator/configprops		查看配置属性，包含默认配置		false
# GET	/actuator/beans				查看bean及其关系列表		false
# GET	/actuator/heapdump			打印线程栈					false
# GET	/actuator/env				查看所有环境变量			false
# GET	/actuator/env/ {name}		查看具体变量值				true
# GET	/actuator/health			查看应用健康指标			true
# GET	/actuator/info				查看应用信息				false
# GET	/actuator/mappings			查看所有 URL 映射			false
# GET	/actuator/metrics			查看应用基本指标			false
# GET	/actuator/metrics/{name}	查看具体指标				false

# POST	/actuator/shutdown			关闭应用					false

# GET	/actuator/httptrace			查看基本追踪信息			false
# GET	/actuator/loggers			显示应用程序中 loggers 配置	false
# GET	/actuator/scheduledtasks	显示定时任务				false

#Spring Boot Admin 上能更直观的看到这些信息，目前手动访问的都是json数据 不够直观
# 一旦手动配置，默认暴露的则不再默认暴露，需要手动暴露
# management.endpoints.web.exposure.include=metrics,health,info
# 如果想全部暴露
management.endpoints.web.exposure.include=*

#设置监控访问的应用根路径，默认是/actuator
#management.endpoints.web.base-path=/monitor

# 显式屏蔽监控访问接口
#management.endpoints.web.exposure.exclude=env,metrics

#开放关闭应用程序端点，不建议开启
#management.endpoint.shutdown.enabled=true

#设置SpringBoot出现错误时, 直接抛出异常
spring.mvc.throw-exception-if-no-handler-found=true
# 不要为我们工程中的资源文件建立映射
spring.resources.add-mappings=false

default.email.enabled=false
default.email.serverStartTime=false

# 日志 SpringBoot默认日志级别是INFO
# 如果日志级别设置为INFO，则意味TRACE和DEBUG级别的日志都看不到。
# TRACE < DEBUG < INFO < WARN < ERROR < FATAL

#只能指定文件夹 不能指定文件 如果是/**.log 则会创建**.log文件夹
#会在指定文件夹下创建 spring.log文件
#logging.path=D:/logs/application

# 默认是在项目根目录下 不能使用classpath: 与 logging.path两者只能使用一个
logging.file=application.log
# root级别日志，项目的所有日志级别
logging.level.root=INFO

# 指定包下的日志级别
logging.level.com.sbp.app.controller=WARN

# %d{HH:mm:ss.SSS}——日志输出时间
# %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
# %-5level——日志级别，并且使用5个字符靠左对齐
# %logger- ——日志输出者的名字
# %msg——日志消息
# %n——平台的换行符
# 定义输出到控制台的日志格式
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n

# 定义输出到日志文件的日志格式
logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n

# 设置日志日期格式
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS

# 设置日志文件最大大小
# logging.file.max-size=10MB

# 转换异常时使用的转换字。
logging.exception-conversion-word=%wEx

#线程池属性，前缀是自己定义的
server.thread.pool.corePoolSize = 3
server.thread.pool.maxPoolSize = 20
server.thread.pool.queueCapacity = 80
server.thread.pool.keepAliveSeconds = 10
server.thread.pool.threadNamePrefix = ThreadPool---
server.thread.pool.waitForTasksToCompleteOnShutdown = true
server.thread.pool.awaitTerminationSeconds = 10

#数据库配置信息
#数据库的搭建参考: https://www.cnblogs.com/wendy-0901/p/12673705.html
spring.datasource.url = jdbc:mysql://101.200.34.148:3306/sbp?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username = root
spring.datasource.password = qw12QW!@
spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.initialSize=20
spring.datasource.minIdle=50
spring.datasource.maxActive=500

spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

#Redis配置
spring.redis.host=101.200.34.148
spring.redis.port=6379
#redis默认16个库 0-15
#可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。
spring.redis.database=0
#连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=50
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=3000
#连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=20
#连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=2
#连接超时时间（毫秒）
spring.redis.timeout=5000
spring.redis.password=qw12QW!@
# 关闭超时时间
spring.redis.lettuce.shutdown-timeout=100
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=30
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
jedis.pool.host=101.200.34.148
jedis.pool.port=6379
jedis.pool.config.max_total=10
jedis.pool.config.max_idle=10
jedis.pool.config.max_wait_millis=100000
jedis.pool.password=qw12QW!@
